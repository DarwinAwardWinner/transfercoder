#!/usr/bin/env python

from transfercoder import *

def create_dirs(dirs):
    """Ensure that a list of directories all exist"""
    for d in dirs:
        if not os.path.isdir(d):
            logger.debug("Creating directory: %s", d)
            os.makedirs(d)

class ParallelException(Exception):
    def __init__(self, message, exc, obj):

        # Call the base class constructor with the parameters it needs
        super(ParallelException, self).__init__(message)

        # Now for your custom code...
        self.exc = exc
        self.obj = obj

class ParallelMethodCaller(object):
    def __init__(self, methodname, *args, **kwargs):
        self.methodname = methodname
        self.args = args
        self.kwargs = kwargs
    def __call__(self, obj):
        try:
            return getattr(obj, self.methodname)(*self.args, **self.kwargs)
        except Exception as exc:
            return ParallelException(str(exc), exc, obj)

# See:
# https://trac.ffmpeg.org/wiki/Encode/HighQualityAudio
# https://trac.ffmpeg.org/wiki/Encode/AAC
# https://trac.ffmpeg.org/wiki/Encode/MP3
# https://trac.ffmpeg.org/wiki/TheoraVorbisEncodingGuide
# http://blog.codinghorror.com/concluding-the-great-mp3-bitrate-experiment/
# http://wiki.hydrogenaud.io/index.php?title=Transparency
# http://soundexpert.org/encoders-128-kbps
default_eopts = {
    # VBR ~192kbps
    'mp3': '-codec:a libmp3lame -q:a 2',
    # VBR ~160kbps
    'ogg': '-codec:a libvorbis -q:a 5',
    # VBR ~192kbps
    'aac': '-codec:a libfdk_aac -vbr 5',
    'm4a': '-codec:a libfdk_aac -vbr 5',
    'mp4': '-codec:a libfdk_aac -vbr 5',
    # VBR ~160kbps
    'opus': '-codec:a libopus -b:a 160k',
}

# Plac types
def comma_delimited_set(x):
    # Handles stripping spaces and eliminating zero-length items
    return set(filter(len, list(x.strip() for x in x.split(","))))

def directory(x):
    """Resolve symlinks, then return the result if it is a directory.

    Otherwise throw an error."""
    path = os.path.realpath(x)
    if not os.path.isdir(path):
        if path == x:
            msg = "Not a directory: %s" % x
        else:
            msg = "Not a directory: %s -> %s" % (x, path)
        raise TypeError(msg)
    else:
        return path

def potential_directory(x):
    if os.path.exists(x):
        return directory(x)
    else:
        return x

def nonneg_int(x):
    x = int(x)
    if x < 0:
        raise ValueError("Not a nonnegative integer")
    return x

# Entry point
def plac_call_main():
    return plac.call(main)

@plac.annotations(
    # arg=(helptext, kind, abbrev, type, choices, metavar)
    source_directory=("The directory with all your music in it.", "positional", None, directory),
    destination_directory=("The directory where output files will go. The directory hierarchy of the source directory will be replicated here.", "positional", None, potential_directory),
    transcode_formats=("A comma-separated list of input file extensions that must be transcoded. ffmpeg must be compiled with support for decoding these formats.", "option", "i", comma_delimited_set, None, 'flac,wv,wav,ape,fla'),
    target_format=("All input transcode formats will be transcoded to this output format. ffmpeg must be compiled with support for encoding this format.", "option", "o", str),
    ffmpeg_path=("The path to ffmpeg. Only required if ffmpeg is not already in your $PATH or is installed with a non-standard name.", "option", "p", str),
    encoder_options=("Extra encoder options to pass to ffmpeg. Passing this will override the defaults, and no sanity checking is performed.", "option", "E", str, None, "'OPTIONS'"),
    rsync_path=("The path to the rsync binary. Rsync will be used if available, but it is not required.", "option", "r", str),
    dry_run=("Don't actually modify anything.", "flag", "n"),
    include_hidden=("Don't skip directories and files starting with a dot.", "flag", "z"),
    delete=("Delete files in the destination that do not have a corresponding file in the source directory.", "flag", "D"),
    force=("Update destination files even if they are newer.", "flag", "f"),
    no_checksum_tags=("Don't save a checksum of the source file in the destination file. Instead, determine whether to transcode a file based on whether the target file has a newer modification time.", "flag", "k"),
    temp_dir=("Temporary directory to use for transcoded files.", "option", "t", directory),
    jobs=("Number of transcoding jobs to run in parallel. Transfers will always run sequentially. The default is the number of cores available on the system. A value of 1 will run transcoding in parallel with copying. Use -j0 to force full sequential operation.", "option", "j", nonneg_int),
    quiet=("Do not print informational messages.", "flag", "q"),
    verbose=("Print debug messages that are probably only useful if something is going wrong.", "flag", "v"),
)
def main(source_directory, destination_directory,
         transcode_formats=set(("flac", "wv", "wav", "ape", "fla")),
         target_format="ogg",
         ffmpeg_path="ffmpeg", encoder_options=None,
         rsync_path="rsync",
         dry_run=False, include_hidden=False, delete=False, force=False,
         no_checksum_tags=False,
         quiet=False, verbose=False,
         temp_dir=tempfile.gettempdir(), jobs=default_job_count()):
    """Mirror a directory with transcoding.

    Everything in the source directory is copied to the destination,
    except that any files of the specified transcode formats are
    transcoded into the target format using ffmpeg. All other files
    are copied over unchanged.

    The default behavior is to transcode several lossless formats
    (flac, wavpack, wav, and ape) to ogg, and all other files are
    copied over unmodified.

    """
    if quiet:
        logger.setLevel(level=logging.WARN)
    elif verbose:
        logger.setLevel(level=logging.DEBUG)
    else:
        logger.setLevel(level=logging.INFO)

    if target_format in transcode_formats:
        argument_error('The target format must not be one of the transcode formats')

    if dry_run:
        logger.info("Running in --dry_run mode. Nothing actually happens.")
        # No point doing nothing in parallel
        if jobs > 0:
            logger.debug("Switching to sequential mode because --dry_run was specified.")
            jobs = 0

    logger.debug("Using %s to determine whether updates are needed.",
                 "file modification times" if no_checksum_tags else "checksum tags")

    source_directory = os.path.realpath(source_directory)
    destination_directory = os.path.realpath(destination_directory)
    df = DestinationFinder(source_directory, destination_directory,
                           transcode_formats, target_format, include_hidden)
    logger.info("Searching for source files to transfer...")
    transfercodes = list(df.transfercodes(eopts=encoder_options, use_checksum=not no_checksum_tags))
    # logger.info("Found %s files to check", len(transfercodes))
    logger.info("Checking for updated files...")
    it = tqdm(transfercodes, desc="Checking for updated files", smoothing=0.1)
    need_at_least_one_transcode = any(map(lambda x: (force or x.needs_update()) and x.needs_transcode, it))
    # The call to list() ensures that the progress bar goes to
    # completion and also pre-caches all the checksums, which will
    # have to be calculated anyway.
    list(it)

    if need_at_least_one_transcode:
        # Only emit encoder-related log messages if transcoding is required
        if encoder_options is None:
            try:
                encoder_options = default_eopts[target_format]
                logger.debug("Using default encoder options for %s format: %s", target_format, repr(encoder_options))
            except KeyError:
                logger.debug("Using default encoder options for %s format", target_format)
    else:
        # Only transcoding happens in parallel, not transferring, so
        # disable parallel if no transcoding is required
        if jobs > 0:
            logger.debug("Switching to sequential mode because no transcodes are required.")
            jobs = 0

    finished = False
    work_dir = tempfile.mkdtemp(dir=temp_dir, prefix="transfercode_")
    canceled = False
    logger.info("Beginning transfer")
    try:
        if not dry_run:
            create_dirs(set(x.dest_dir for x in transfercodes))
            failed_files = []
        if jobs == 0:
            logger.debug("Running in sequential mode.")
            if need_at_least_one_transcode:
                desc = "Transcoding & copying"
            else:
                desc = "Copying"
            for tfc in tqdm(transfercodes, desc="Transcoding & Copying", smoothing=0.1):
                try:
                    if tfc.needs_update(loglevel=logging.INFO):
                        fname = tfc.src
                        try:
                            tfc = tfc.transcode_to_tempdir(tempdir=work_dir, ffmpeg=ffmpeg_path,
                                                           rsync=rsync_path, force=force, dry_run=dry_run)
                        except FFRuntimeError as exc:
                            logger.error("Error running ffmpeg on %s:\n%s",
                                         fname, exc.args[0].encode('utf-8').decode('unicode_escape'))
                            failed_files.append(fname)
                            continue
                        except Exception as exc:
                            logger.exception("Exception while transcoding %s: %s", fname, exc)
                            failed_files.append(fname)
                            continue
                        tfc.transfer(ffmpeg=ffmpeg_path, rsync=rsync_path, force=force, dry_run=dry_run)
                except Exception as exc:
                    logger.exception("Exception while transferring %s: %s", fname, exc)
                    failed_files.append(fname)
                    continue
        else:
            assert not dry_run, "Parallel dry run makes no sense"
            logger.debug("Running %s transcoding %s and 1 transfer job in parallel.", jobs, ("jobs" if jobs > 1 else "job"))
            transcode_pool = None
            last_file = None
            try:
                # Transcoding step (parallel)
                if need_at_least_one_transcode:
                    desc = "Transcoding & copying"
                    logger.debug('Setting up transcoding ThreadPool')
                    tfunc = ParallelMethodCaller("transcode_to_tempdir", tempdir=work_dir, ffmpeg=ffmpeg_path, rsync=rsync_path, force=force)
                    transcode_pool = ThreadPool(jobs)
                    # Sort jobs that don't need transcoding first
                    transfercodes = sorted(transfercodes, key = lambda x: x.needs_transcode)
                    transcoded = transcode_pool.imap_unordered(tfunc, transfercodes)
                else:
                    desc = "Copying"
                    logger.debug('Skipping the transcoding step because no files need to be transcoded')
                    transcoded = transfercodes
                    # Transfer step (not parallel, since it is disk-bound)
                for tfc in tqdm(transcoded, desc=desc, total=len(transfercodes)):
                    if isinstance(tfc, ParallelException):
                        par_exc = tfc
                        orig_exc = par_exc.exc
                        tfc = par_exc.obj
                        fname = tfc.src
                        try:
                            raise orig_exc
                        except FFRuntimeError as exc:
                            logger.error("Error running ffmpeg on %s:\n%s",
                                         fname, exc.args[0].encode('utf-8').decode('unicode_escape'))
                            failed_files.append(fname)
                            continue
                        except Exception as exc:
                            logger.exception("Exception while transcoding %s: %s", fname, exc)
                            failed_files.append(fname)
                            continue
                        last_file = tfc.dest
                    try:
                        tfc.transfer(ffmpeg=ffmpeg_path, rsync=rsync_path, force=force, dry_run=dry_run)
                    except Exception as exc:
                        logger.exception("Exception while transferring %s: %s", fname, exc)
                        failed_files.append(fname)
                        continue
                    last_file = None
            except KeyboardInterrupt:
                logger.error("Canceled.")
                delete = False
                if transcode_pool is not None:
                    logger.debug("Terminating transcode process pool")
                    transcode_pool.terminate()
                    transcode_pool = None
                raise
            finally:
                if transcode_pool is not None:
                    logger.debug("Closing transcode process pool")
                    transcode_pool.close()
                if last_file and os.path.exists(last_file):
                    logger.info("Cleaning incomplete transfer: %s", last_file)
                    os.remove(last_file)
        if delete:
            for f in df.walk_extra_dest_files():
                logger.info("Deleting: %s", f)
                if not dry_run:
                    os.remove(f)
        if work_dir and os.path.exists(work_dir):
            logger.debug("Deleting temporary directory")
            shutil.rmtree(work_dir, ignore_errors=True)
            finished = True
    except KeyboardInterrupt:
        canceled = True
        finished = False
    finally:
        if work_dir and os.path.exists(work_dir):
            logger.debug("Deleting temporary directory")
            shutil.rmtree(work_dir, ignore_errors=True)
        if failed_files:
            logger.error("The following %s files were not processed successfully:\n%s",
                         len(failed_files),
                         "\n".join("\t" + f for f in failed_files))
            if finished:
                logger.info("Finished with some errors (see above).")
            elif canceled:
                logger.info("Exited after being cancelled, with some errors (see above).")
            else:
                logger.info("Exited with some errors (see above).")
        else:
            if finished:
                logger.info("Finished with no errors.")
            elif canceled:
                logger.info("Exited after being canceled, with no errors so far.")
        if dry_run:
            logger.info("Ran in --dry_run mode. Nothing actually happened.")

if __name__ == "__main__":
    plac_call_main()
